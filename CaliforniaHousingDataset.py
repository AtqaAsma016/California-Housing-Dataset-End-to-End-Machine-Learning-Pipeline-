# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EgJRPNEaFtY5uCGOYLiE-UOYgM7rN3eC
"""

pip install ultralytics

from google.colab import files
uploaded = files.upload()

import zipfile
import os

# Unzip the uploaded file (adjust name if needed)
with zipfile.ZipFile("Tumor Detection.v8i.yolov11.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/TumorDetection")

# Now your dataset is in /content/TumorDetection

from ultralytics import YOLO

model = YOLO("yolo11n.pt")

train_results = model.train(
    data="/content/TumorDetection/data.yaml",
    epochs=20,
    imgsz=640,
    device="cpu",  # Changed from 0 to "cpu"
)

from ultralytics import YOLO

model = YOLO("yolo11n.pt")

train_results = model.train(
    data="/content/TumorDetection/data.yaml",
    epochs=20,
    imgsz=640,
    device=0,
    )# Changed from 0 to "cpu"

pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# Step 1: Setup and Data Download (Fixed)
!pip install pandas matplotlib scikit-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os  # This was missing!
import tarfile
import urllib.request

# Download the dataset
DOWNLOAD_ROOT = "https://raw.githubusercontent.com/ageron/handson-ml2/master/"
HOUSING_PATH = "datasets/housing"
HOUSING_URL = DOWNLOAD_ROOT + "datasets/housing/housing.tgz"

def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):
    os.makedirs(housing_path, exist_ok=True)
    tgz_path = os.path.join(housing_path, "housing.tgz")
    urllib.request.urlretrieve(housing_url, tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path=housing_path)
    housing_tgz.close()

fetch_housing_data()

# Load the data
def load_housing_data(housing_path=HOUSING_PATH):
    csv_path = os.path.join(housing_path, "housing.csv")
    return pd.read_csv(csv_path)

housing = load_housing_data()
housing.head()

# Step 2: Data Exploration
housing.info()  # Check missing values and data types
housing["ocean_proximity"].value_counts()  # Categorical distribution
housing.describe()  # Summary statistics

# Plot histograms
housing.hist(bins=50, figsize=(20, 15))
plt.show()

# Step 3: Create a Stratified Test Set
housing["income_cat"] = pd.cut(housing["median_income"],
                               bins=[0., 1.5, 3.0, 4.5, 6., np.inf],
                               labels=[1, 2, 3, 4, 5])

from sklearn.model_selection import StratifiedShuffleSplit

split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]

# Remove income_cat column
for set_ in (strat_train_set, strat_test_set):
    set_.drop("income_cat", axis=1, inplace=True)

# Step 4: Data Visualization (Fixed)
housing = strat_train_set.copy()

# Geographical plot (unchanged)
housing.plot(kind="scatter", x="longitude", y="latitude", alpha=0.4,
             s=housing["population"]/100, label="population", figsize=(10, 7),
             c="median_house_value", cmap=plt.get_cmap("jet"), colorbar=True)
plt.legend()
plt.show()

# Correlation matrix - only for numerical columns
numerical_housing = housing.select_dtypes(include=[np.number])  # Select only numerical columns
corr_matrix = numerical_housing.corr()
print(corr_matrix["median_house_value"].sort_values(ascending=False))

# ===== STEP 5: Data Preprocessing Pipeline =====
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.base import BaseEstimator, TransformerMixin

# Custom transformer
class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    def __init__(self, add_bedrooms_per_room=True):
        self.add_bedrooms_per_room = add_bedrooms_per_room
    def fit(self, X, y=None):
        return self
    def transform(self, X):
        rooms_per_household = X[:, 3] / X[:, 6]  # rooms/household
        population_per_household = X[:, 5] / X[:, 6]  # population/household
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, 4] / X[:, 3]  # bedrooms/room
            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]
        return np.c_[X, rooms_per_household, population_per_household]

# Prepare data
housing = strat_train_set.drop("median_house_value", axis=1)
housing_labels = strat_train_set["median_house_value"].copy()

# Pipeline
num_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy="median")),
    ('attribs_adder', CombinedAttributesAdder()),
    ('std_scaler', StandardScaler()),
])

num_attribs = list(housing.drop("ocean_proximity", axis=1))
cat_attribs = ["ocean_proximity"]

full_pipeline = ColumnTransformer([
    ("num", num_pipeline, num_attribs),
    ("cat", OneHotEncoder(), cat_attribs),
])

housing_prepared = full_pipeline.fit_transform(housing)  # This creates housing_prepared

# ===== STEP 6: Train and Evaluate Models =====
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lin_reg = LinearRegression()
lin_reg.fit(housing_prepared, housing_labels)  # Now housing_prepared exists!

# Evaluate
housing_predictions = lin_reg.predict(housing_prepared)
lin_mse = mean_squared_error(housing_labels, housing_predictions)
lin_rmse = np.sqrt(lin_mse)
print(f"Linear Regression RMSE: ${lin_rmse:,.2f}")

# Step 7: Fine-Tune with GridSearchCV
from sklearn.model_selection import GridSearchCV

param_grid = [
    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},
    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},
]

grid_search = GridSearchCV(forest_reg, param_grid, cv=5,
                          scoring='neg_mean_squared_error',
                          return_train_score=True)
grid_search.fit(housing_prepared, housing_labels)

print("Best Parameters:", grid_search.best_params_)
print("Best Estimator:", grid_search.best_estimator_)

# Step 6: Train a Random Forest model (must run this first!)
from sklearn.ensemble import RandomForestRegressor

forest_reg = RandomForestRegressor(random_state=42)  # Define the model
forest_reg.fit(housing_prepared, housing_labels)     # Train it

# Step 7: Fine-tune with GridSearchCV (now forest_reg is defined)
from sklearn.model_selection import GridSearchCV

param_grid = [
    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},
    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},
]

grid_search = GridSearchCV(
    forest_reg,  # Now this variable exists!
    param_grid,
    cv=5,
    scoring='neg_mean_squared_error',
    return_train_score=True
)
grid_search.fit(housing_prepared, housing_labels)

# Print results
print("Best Parameters:", grid_search.best_params_)
print("Best Estimator:", grid_search.best_estimator_)

# Step 8: Evaluate on Test Set
final_model = grid_search.best_estimator_

X_test = strat_test_set.drop("median_house_value", axis=1)
y_test = strat_test_set["median_house_value"].copy()

X_test_prepared = full_pipeline.transform(X_test)
final_predictions = final_model.predict(X_test_prepared)

final_mse = mean_squared_error(y_test, final_predictions)
final_rmse = np.sqrt(final_mse)
print(f"Final RMSE on Test Set: {final_rmse}")